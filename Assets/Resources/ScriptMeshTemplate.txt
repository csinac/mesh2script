using UnityEngine;
namespace RectangleTrainer.Mesh2Script.ScriptMesh
{{
	public static class {0}
	{{
		private static Mesh mesh;

        private static float[] vertList = 
		{{
            {1}
		}};

		private static int[] triangles =
		{{
            {2}
		}};

        private static float[] nList = 
		{{
            {3}
		}};

        private static float[] uvList = 
		{{
            {4}
		}};

		public static Mesh Mesh
		{{
			get
			{{
				if (mesh == null)
					mesh = Make();

				return mesh;
			}}
		}}

        private static Vector3[] FloatListToVector3(ref float[] list) {{
			Vector3[] vectorArray = new Vector3[list.Length / 3];
            for(int i = 0; i < vectorArray.Length; i ++) {{
                vectorArray[i] = new Vector3(list[i * 3], list[i * 3 + 1], list[i * 3 + 2]);
            }}

            return vectorArray;
        }}

        private static Vector2[] FloatListToVector2(ref float[] list) {{
			Vector2[] vectorArray = new Vector2[list.Length / 2];
            for(int i = 0; i < vectorArray.Length; i ++) {{
                vectorArray[i] = new Vector2(list[i * 2], list[i * 2 + 1]);
            }}

            return vectorArray;
        }}

		private static Mesh Make()
		{{
			Vector3[] vertices = FloatListToVector3(ref vertList);
			Vector3[] normals = FloatListToVector3(ref nList);
            Vector2[] uv = FloatListToVector2(ref uvList);

			Mesh mesh = new Mesh();
			mesh.vertices = vertices;
			mesh.triangles = triangles;
			mesh.normals = normals;
            mesh.uv = uv;

            if(mesh.normals.Length == 0) {{
                mesh.RecalculateNormals();
            }}

            mesh.RecalculateBounds();

			return mesh;
		}}
	}}
}}